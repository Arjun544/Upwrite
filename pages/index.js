import WriteProposal from "@/components/WriteProposal";
import Response from "@/components/Response";
import Head from "next/head";
import { createContext, useContext } from "react";
import { Toaster } from "react-hot-toast";
import { AppContext } from "./_app";
import { createClient } from "@supabase/supabase-js";
import { getSession, useSession } from "next-auth/react";

export const SupabaseContext = createContext(null);

export default function Home() {
  const { currentStep, setCurrentStep } = useContext(AppContext);
  const { data: session } = useSession();
  const { supabaseAccessToken } = session;

  // Create a single supabase client for interacting with your database
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_KEY,
    {
      global: {
        headers: {
          Authorization: `Bearer ${supabaseAccessToken}`,
        },
      },
    }
  );

  return (
    <SupabaseContext.Provider value={{ supabase }}>
      <Head>
        <title>Upwrite</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex w-full min-h-screen gap-8 pr-4 pl-28 overflow-hidden">
        <Toaster containerClassName="text-sm" />

        {currentStep === 1 ? (
          <WriteProposal setCurrentStep={setCurrentStep} />
        ) : (
          <Response />
        )}
      </div>
    </SupabaseContext.Provider>
  );
}

export async function getServerSideProps(ctx) {
  const session = await getSession(ctx);

  return {
    props: {
      session,
    },
  };
}
